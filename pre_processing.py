# -*- coding: utf-8 -*-
"""pre_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tkPR4c7jl7Rr_ByCntvDN43eHr2YAovw
"""
import numpy as np
import pandas as pd
import anndata

def read_h5ad(filename, batch_label):
    dataset = {}
    adata = anndata.read_h5ad(filename)

    # Extract gene expression matrix
    gene_exp = adata.X.T.toarray()  # Transpose to match the format of CSV data
    print(gene_exp.shape)
    dataset['gene_exp'] = gene_exp
    #print(gene_exp.shape)
    # Extract gene symbols
    gene_sym = adata.var_names.tolist()
    dataset['gene_sym'] = gene_sym
    #print(gene_sym)
    # Extract sample labels
    sample_labels = adata.obs_names.tolist()
    dataset['sample_labels'] = sample_labels
    #print(sample_labels)
    # Add batch label
    dataset['batch_labels'] = [batch_label] * len(sample_labels)

    return dataset


def preprocess_data(data1, data2, prep):
    X = np.concatenate((data1, data2), axis=0)
    Y = np.zeros((X.shape[0], 2))
    Y[:data1.shape[0], 0] = 1
    Y[data1.shape[0]:, 1] = 1
    
    # Initialize muX
    muX = None

    # Scaling the data based on prep parameter
    if prep == 'no':
        pass
    elif prep == 'mc':
        muX = X.mean(axis=0)
        X = X - muX
        Y = Y - Y.mean(axis=0)
    elif prep == 'uv':
        muX = X.mean(axis=0)
        X = (X - muX) / X.std(axis=0)
        Y = (Y - Y.mean(axis=0,keepdims=True)) / Y.std(axis=0,keepdims=True)
    elif prep == 'pa':
        muX = X.mean(axis=0)
        X = (X - muX) / np.sqrt(X.var(axis=0))
        Y = (Y - Y.mean(axis=0,keepdims=True)) / np.sqrt(Y.var(axis=0,keepdims=True))
    else:
        raise ValueError('Unknown preprocessing method.')  
    
    print(muX)
    return X, Y, muX


def read_csv(filename, batch_label):
    dataset = {}
    df = pd.read_csv(filename, header=None)
    dat = df[df.columns[1:]].values
    
    dataset['sample_labels'] = df.columns[1:].tolist()
    gene_sym = df[df.columns[0]].tolist()[1:] 
    gene_exp = dat[1:, :].astype(float)  
    dataset['gene_exp'] = gene_exp
    dataset['gene_sym'] = gene_sym
    
    dataset['batch_labels'] = [batch_label] * dat.shape[1] 

    return dataset

def pre_processing(dataset_file_list, pre_process_paras, f):
    prep = pre_process_paras['prep']

    if len(dataset_file_list) < 2:
        raise ValueError('At least two datasets are needed.')

    for i in range(len(dataset_file_list) - 1):
        data_file1 = dataset_file_list[i]
        data_file2 = dataset_file_list[i+1]
        
        if f == "csv":
            dataset1 = read_csv(data_file1, batch_label=1)
            dataset2 = read_csv(data_file2, batch_label=2)
        elif f == "h5ad":
            dataset1 = read_h5ad(data_file1, batch_label=1)
            dataset2 = read_h5ad(data_file2, batch_label=2)
        else:
            raise ValueError('Unknown file type. Use "csv" or "h5ad".')
        
        print("read done")
        print(dataset1['gene_exp'].T)
        print(dataset2['gene_exp'].T)
        X, Y ,muX= preprocess_data(dataset1['gene_exp'].T, dataset2['gene_exp'].T, prep)
        print("preprocess done")
        dataset = {}
        dataset['gene_exp'] = X.T
        print(f"The shape of the gene_exp is: {dataset['gene_exp'].shape}")
        dataset['gene_sym'] = dataset1['gene_sym']
        dataset['labels'] = Y.T
        

        dataset['sample_labels'] = np.concatenate([dataset1['sample_labels'], dataset2['sample_labels']], axis=0)
        dataset['batch_labels'] = np.concatenate([dataset1['batch_labels'], dataset2['batch_labels']], axis=0)
  
    return dataset, muX

